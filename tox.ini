[tox]
requires =
    tox>=4.30.2
    tox-extra>=2.2
    tox-uv>=1.28
env_list =
    py
    deps
    docs
    lint
    milestone
    pkg
    ee
    devspaces
    devel
skip_missing_interpreters = true

[testenv]
runner = uv-venv-lock-runner
description = Run tests
package = editable
pass_env =
    CI
    CONTAINER_*
    DOCKER_*
    GITHUB_*
    HOME
    PYTEST_*
    SSH_AUTH_SOCK
    TERM
    USER
    XDG_RUNTIME_DIR
set_env =
    COVERAGE_COMBINED = {env_dir}/.coverage
    COVERAGE_FILE = {env:COVERAGE_FILE:{env_dir}/.coverage.{envname}}
    COVERAGE_PROCESS_START = {tox_root}/pyproject.toml
    FORCE_COLOR = 1
    PRE_COMMIT_COLOR = always
    TERM = xterm-256color
commands_pre =
    sh -c "rm -f {env_dir}/.coverage* 2>/dev/null || true"
commands =
    python -c 'import pathlib; pathlib.Path("{env_site_packages_dir}/cov.pth").write_text("import coverage; coverage.process_startup()")'
    coverage run -m pytest {posargs:-n auto --junitxml=./junit.xml}
commands_post =
    ./tools/report-coverage
allowlist_externals =
    ./tools/report-coverage
    git
    rm
    sh

[testenv:deps]
description = Bump all dependencies
base_python = python3.11
skip_install = true
commands_pre =
commands =
    pre-commit run --all-files --show-diff-on-failure --hook-stage manual deps
    pre-commit autoupdate
dependency_groups = lint
env_dir = {toxworkdir}/lint

[testenv:docs]
description = Builds docs
package = editable
skip_install = false
set_env =
    NO_COLOR = 1
    TERM = dump
commands_pre =
commands =
    mkdocs build {posargs:}
commands_post =
dependency_groups = docs

[testenv:lint]
description = Enforce quality standards under {basepython}
skip_install = true
commands_pre =
commands =
    pre-commit run --show-diff-on-failure --all-files
commands_post =
dependency_groups = lint

[testenv:milestone]
description =
    Run tests with ansible-core milestone branch and without dependencies constraints
deps =
    ansible-core@ https://github.com/ansible/ansible/archive/milestone.tar.gz
    ansible-creator<24.10.0

[testenv:pkg]
description =
    Do packaging/distribution
skip_install = true
commands_pre =
commands =
    rm -rfv {tox_root}/dist/
    python -m build --outdir {tox_root}/dist/ {tox_root}
    sh -c "python -m twine check --strict {tox_root}/dist/*"
commands_post =
dependency_groups = pkg

[testenv:ee]
description =
    Build the ee container image
skip_install = false
extras =
    server
commands_pre =
commands =
    python -m build --version
    ./tools/ee.sh
commands_post =
    ./tools/cleanup.sh
allowlist_externals =
    ./tools/cleanup.sh
    ./tools/ee.sh
dependency_groups = ee, dev
editable = true

[testenv:devspaces]
description = Build devspaces container image for current architecture
skip_install = true
extras =
    server
commands_pre =
commands =
    ./tools/devspaces.sh {posargs}
commands_post =
    ./tools/cleanup.sh
allowlist_externals =
    ./tools/cleanup.sh
    ./tools/devspaces.sh
dependency_groups = ee

[testenv:devel]
deps =
    ansible-compat@ git+https://github.com/ansible/ansible-compat.git
    ansible-core@ git+https://github.com/ansible/ansible.git
    ansible-creator@ git+https://github.com/ansible/ansible-creator.git
    ansible-dev-environment@ git+https://github.com/ansible/ansible-dev-environment.git
    ansible-lint@ git+https://github.com/ansible/ansible-lint.git
    ansible-navigator@ git+https://github.com/ansible/ansible-navigator.git
    molecule@ git+https://github.com/ansible/molecule.git
    pytest-ansible@ git+https://github.com/ansible/pytest-ansible.git
    tox-ansible@ git+https://github.com/ansible/tox-ansible.git
